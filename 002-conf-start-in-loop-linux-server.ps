# Split the server list into an array
$servers1 = 'server1.dummy.com','server1.dummy.com'
$servers = $servers1 -split ','

# Credentials and service name
$username = 'server1.dummy.com'
$password = 'server1.dummy.com'
$confService = "confluence"
function Run-SSHCommand($sshSession, $command) {
    try {
        $result = Invoke-SSHCommand -SessionId $sshSession.SessionId -Command $command
        return $result.Output
    } catch {
        Write-Error "Error occurred while executing command: $_"
        return $null
    }
}


function Check-confStatus($sshSession) {
    $statusCommand = "sudo systemctl is-active $confService"
    return Run-SSHCommand $sshSession $statusCommand
}


function Start-confService($sshSession) {
    $startCommand = "sudo systemctl start $confService"
    return Run-SSHCommand $sshSession $startCommand
}

foreach ($server in $servers) {
    try {
        $sshSession = New-SSHSession -ComputerName $server -Credential (New-Object PSCredential($username, (ConvertTo-SecureString $password -AsPlainText -Force))) -AcceptKey
        Write-Output "SSH session secured successfully for $server."
    } catch {
        Write-Error "Failed to establish SSH session for $server."
        continue
    }

    $startResult = Start-confService($sshSession)

    if ($startResult -eq $null) {
        Write-Output "Skipping further checks for $server due to command execution failure."
        Remove-SSHSession -SessionId $sshSession.SessionId
        continue
    }


    for ($i = 1; $i -le 4; $i++) {
        $status = Check-confStatus($sshSession)
        if ($status -eq "active") {
            Write-Output "conf has been successfully started on $server."
            break
        } elseif ($status -eq "failed") {
            Write-Output "conf is not running on $server. Attempt $i of 4."
        } else {
            Write-Output "Unexpected status on $server : $status. Please check conf manually."
            break
        }
        Start-Sleep -Seconds 5
    }


    if ($status -ne "active") {
        Write-Output "Could not start conf on $server after multiple attempts. Please check manually."
    }

    Remove-SSHSession -SessionId $sshSession.SessionId
}

Write-Output "conf start process completed on all servers."
exit 0
